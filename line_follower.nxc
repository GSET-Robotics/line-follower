 #define MOTOR_SPEED 25
 #define VARIABLE_SPEED 50
 #define BASE_ANGLE 305
 unsigned int black, white, y, range, value;

 void calibrateColor(bool color) {
   if (color) {
      white = SensorRaw(S3);
   }
   else {
     black = SensorRaw(S3);
   }
 }

 void lineFollow(unsigned int x) {

    //NumOut(0, LCD_LINE1, x);
    // TextOut(0, LCD_LINE2, NumToStr(white));

      value = x - white;
      range = black - white;
      y = (2 * value / range) - 1;
      
      if (y < -0.9) {
           OnFwd(OUT_A, -1 * (MOTOR_SPEED + VARIABLE_SPEED * (-y)));
      }
      else {
           OnFwd(OUT_A, MOTOR_SPEED + VARIABLE_SPEED * y);
      }
      if (y > 0.9) {
          OnFwd(OUT_C, VARIABLE_SPEED * (-y) - MOTOR_SPEED);
      }
      else {
          OnFwd(OUT_C, MOTOR_SPEED + VARIABLE_SPEED * (-y));
      }
}


void runHouse() {
    int room = 1;

    // pull forward a bit
    while (SensorUS(S2) > 12) {
       OnFwd(OUT_AC, 40);
    }
    Off(OUT_AC);

    // turn right 90 degrees
    RotateMotorEx(OUT_AC, 40, BASE_ANGLE, -100, true, true);
    Off(OUT_AC);

   /* // forward until US
    while (SensorUS(S2) > 12) {
      OnFwd(OUT_AC, 40);
    }
    Off(OUT_AC);

    // left 90 degrees
    RotateMotorEx(OUT_AC, 40, BASE_ANGLE, 100, true, true);
    Off(OUT_AC);

    // forward until US, record distance or turn around
    while (SensorUS(S2) > 10) {
      OnFwd(OUT_AC, 75);
    }
    Off(OUT_AC);
    RotateMotorEx(OUT_AC, 40, BASE_ANGLE * 2, 100, true, true);
    Off(OUT_AC);

    // backward/forward same distance or until US
    while (SensorUS(S2) > 10) {
      OnFwd(OUT_AC, 40);
    }

    // turn left/right 90 degrees depending on last step
    RotateMotor(OUT_A, 40, BASE_ANGLE);
    Off(OUT_C);

    // forward 3 inches, right 90 degrees sense wall (exit if wall), left 90 degrees, repeat

    while(SensorUS(S2) > 10) {
      OnFwd(OUT_AC, 75);
      Wait(1000);
      Off(OUT_AC);
      RotateMotor(OUT_A, 75, BASE_ANGLE);
      if (SensorUS(S2) > 40) break;
      RotateMotor(OUT_A, -75, BASE_ANGLE);
    }
    */

    // backwards until entrance
    while (SensorUS(S2) < 67) {
      OnFwd(OUT_AC, -40);
    }
    Off(OUT_AC);
    
    room = 2;

    //turn left
    RotateMotorEx(OUT_AC, 40, BASE_ANGLE, 100, true, true);
    Off(OUT_AC);
    
    // forward till US
    while (SensorUS(S2) > 12) {
      OnFwd(OUT_AC, 40);
    }
    
    // back out of room
    while (SensorUS(S2) < 47) {
      OnFwd(OUT_AC, -40);
    }



   /*
    // (forward until US, right 90 degrees) x 3

    for (int i = 0; i < 3; i ++) {
      while (SensorUS(S2) > 10) {
        OnFwd(OUT_AC, 75);
      }
      Off(OUT_AC);
      RotateMotor(OUT_A, 75, BASE_ANGLE);
      Off(OUT_A);
    }


    // forward until US, left 90 degrees
    while (SensorUS(S2) > 10) {
      OnFwd(OUT_AC, 75);
    }
    Off(OUT_AC);
    RotateMotor(OUT_C, 75, BASE_ANGLE);

    // (forward until US, right 90 degrees) x 2
    for (int i = 0; i < 2; i ++) {
      while (SensorUS(S2) > 10) {
        OnFwd(OUT_AC, 75);
      }
      Off(OUT_AC);
      RotateMotor(OUT_A, 75, BASE_ANGLE);
      Off(OUT_A);
    }
    */
}

task main() {
  SetSensorLight(S3);
  SetSensorUltrasonic(S2);
  SetSensorType(S1, SENSOR_TYPE_LOWSPEED);
  SetSensorLowspeed(S4);
  Wait(30);
  
  
  calibrateColor(false);
  RotateMotor(OUT_C, 75, BASE_ANGLE);
  Wait(30);
  calibrateColor(true);
  RotateMotor(OUT_C, -75, BASE_ANGLE);
  Wait(30);
  
  
  int c = 0;
  unsigned long prevTick;
  bool prevOnBody = false;
  int count = 0;
  
    while (c != 7 && c != 8 && c != 9) {
    unsigned long tick = CurrentTick();
    c = SensorHTColorNum(S1);
    NumOut(0, LCD_LINE1, c);
    bool onBody = (c == 3 || c == 2);
    if (((count == 0) || (tick = prevTick > 2000)) && onBody && !prevOnBody) {
       //PlayToneEx(300, 2000, 10, false);
       prevTick = tick;
       count++;
    }
    
    prevOnBody = onBody;
    unsigned int x = SensorRaw(S3);
    lineFollow(x);
  }

  Off(OUT_AC);
  ClearScreen();

  runHouse();
  TextOut(0, 0, "YAY!");
  PlayToneEx(300, 2000, 10, false);

  Wait(5000);
}

